<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- PortfolioRepository 인터페이스를 위한 MyBatis 매퍼 파일 -->
<!--resultMap은 MyBatis에서 데이터베이스 결과를 자바 객체에 매핑하기 위한 방법-->
<mapper namespace="com.lec.spring.repository.portfolio.PortfolioRepository">

    <!-- SELECT_BASE: 기본 SELECT 쿼리에 대한 공통 부분 -->
    <sql id="SELECT_BASE">
        SELECT
        p.postId "p_postId",                 <!-- p 테이블의 postId 필드 -->
        p.content "p_content",               <!-- p 테이블의 content 필드 -->
        p.title "p_title",                   <!-- p 테이블의 title 필드 -->
        p.experience "p_experience",         <!-- p 테이블의 experience 필드 -->
        p.userPr "p_userPr",                 <!-- p 테이블의 userPr 필드 -->
        p.increaseViewCount "p_increaseViewCount", <!-- p 테이블의 increaseViewCount 필드 -->
        p.regdate "p_regDate",               <!-- p 테이블의 regdate 필드 -->
        p.userId "p_userId",                 <!-- p 테이블의 userId 필드 -->
        u.id "u_id",                         <!-- u 테이블의 id 필드 -->
        u.username "u_username",             <!-- u 테이블의 username 필드 -->
        u.name "u_name",                     <!-- u 테이블의 name 필드 -->
        u.regdate "u_regdate",               <!-- u 테이블의 regdate 필드 -->
        u.email "u_email"                    <!-- u 테이블의 email 필드 -->
        FROM
        user u, portfolio p                  <!-- user와 portfolio 테이블을 조인하여 가져오기 -->
        WHERE
        u.id = p.userId                      <!-- 조인 조건: user의 id와 portfolio의 userId가 일치하는 경우 -->
    </sql>

    <!-- 여러 테이블의 데이터를 JOIN하여 User 객체에 매핑하기 위한 resultMap -->
    <resultMap id="mapUser" type="com.lec.spring.domain.user.User">
        <!-- user 테이블의 각 필드를 User 객체의 해당 속성과 매핑 -->
        <result column="u_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_password" property="password"/>
        <result column="u_name" property="name"/>
        <result column="u_regdate" property="regDate"/>
        <result column="u_email" property="email"/>
    </resultMap>

    <!-- Portfolio 객체에 매핑하기 위한 resultMap -->
    <resultMap id="mapPortfolio" type="com.lec.spring.domain.portfolio.Portfolio">
        <!-- portfolio 테이블의 각 필드를 Portfolio 객체의 해당 속성과 매핑 -->
        <result column="p_userId" property="userId"/>
        <result column="p_postId" property="postId"/>
        <result column="p_content" property="content"/>
        <result column="p_title" property="title"/>
        <result column="p_experience" property="experience"/>
        <result column="p_userPr" property="userPr"/>
        <result column="p_increaseViewCount" property="increaseViewCount"/>
        <result column="p_regDate" property="regDate"/>
        <!-- user와의 JOIN 결과를 User 객체에 매핑 -->
        <collection property="user" resultMap="mapUser"/>
    </resultMap>

    <!-- 데이터베이스에 새로운 portfolio 데이터를 추가하는 쿼리 -->
    <insert id="write" flushCache="true" parameterType="com.lec.spring.domain.portfolio.Portfolio">
        INSERT INTO portfolio (userId, content, title, experience, userPr)
        VALUES (#{user.id}, #{content}, #{title}, #{experience}, #{userPr})
    </insert>

    <!-- 데이터베이스에 새로운 portfolio 데이터를 저장하는 쿼리 -->
    <update id="save" parameterType="com.lec.spring.domain.portfolio.Portfolio" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO portfolio (postId, userId, content, title, experience, userPr, increaseViewCount)
        VALUES (#{postId}, #{user.id}, #{content}, #{title}, #{experience}, #{userPr}, #{increaseViewCount})
    </update>

    <!-- 데이터베이스에 포트폴리오 데이터를 업데이트하는 쿼리 -->
    <update id="update" flushCache="true" parameterType="com.lec.spring.domain.portfolio.Portfolio">
        UPDATE portfolio
        SET content= #{content}, title=#{title}, experience=#{experience}, userPr = #{userPr}
        WHERE postId = #{postId}
    </update>

    <!-- 조회수를 증가시키는 쿼리 -->
    <update id="increaseViewCount">
        UPDATE portfolio
        SET increaseViewCount = increaseViewCount + 1
        WHERE postId = #{param}
        -- param은 MyBatis의 XML 파일에서 사용되는 특수한 변수
    </update>

    <!-- 특정 Portfolio 데이터를 삭제하는 쿼리 -->
    <delete id="delete">
        DELETE FROM portfolio
        WHERE postId = #{postId}
    </delete>

    <!-- 모든 Portfolio 데이터를 조회하는 쿼리 -->
    <select id="findAll" resultMap="mapPortfolio">
        <include refid="SELECT_BASE"/> <!-- 기본 SELECT 쿼리를 재사용하여 모든 데이터를 조회 -->
        ORDER BY p_postId DESC         <!-- postId를 기준으로 내림차순으로 정렬 -->
    </select>

    <!-- 특정 Portfolio 데이터를 상세 조회하는 쿼리 -->
    <select id="detail" resultMap ="mapPortfolio">
        <include refid="SELECT_BASE"/>
        AND p.postId = #{id}
    </select>

    <select id="selectFromRow" resultMap="mapPortfolio">
        <include refid="SELECT_BASE"/>
        ORDER BY p.postId DESC
        LIMIT #{param1}, #{param2}
    </select>
    <select id="countAll" resultType="int">
        SELECT count(*) from portfolio
    </select>
    <select id="forMainpage" resultMap="mapPortfolio">
        <include refid="SELECT_BASE"/>
        ORDER BY p.increaseViewCount DESC
        LIMIT 3
    </select>

    <select id="findByUserId" resultMap="mapPortfolio">
        <include refid="SELECT_BASE"/>
        AND u.id = #{id}
    </select>

</mapper>
